name: Build

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - published
  workflow_dispatch:

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Set the build number in MinVer.
  MINVERBUILDMETADATA: build.${{github.run_number}}
  
jobs:
  build:
    name: Build-${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2.3.4
        with:
          lfs: true
          fetch-depth: 0
      
      - name: "Install .NET Core SDK"
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
          
      - name: Build template project
        run: dotnet build 'src/JohannDev.DotNet.Web.Spa.ProjectTemplates.csproj' --configuration=Release
      
      - name: Run template tests
        run: dotnet test tests.csproj --logger trx --results-directory "TestResults"
      
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-results.${{github.run_number}}
          path: TestResults
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

      - name: Pack template project
        if: github.event_name == 'release'
        run: dotnet pack ./src --configuration=Release --output=./Artefacts

      - name: "Publish Artefacts"
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{matrix.os}}
          path: "./Artefacts"

  push_nuget:
    name: "Push to nuget.org"
    runs-on: ubuntu-latest
    needs: build
    # if: github.event_name == 'release'
    steps:
      - name: "Download Artefact"
        uses: actions/download-artifact@v2
        with:
          name: "ubuntu-latest"
      - name: "Dotnet NuGet Push"
        run: |
          Get-ChildItem ./ -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { dotnet nuget push $_ --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{secrets.NUGET_API_KEY}} }
        shell: pwsh
